{"ast":null,"code":"import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { defaultBinaryType } from \"./transports/websocket-constructor.js\";\nexport class Socket extends Emitter {\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri - uri or options\r\n   * @param {Object} opts - options\r\n   */\n  constructor(uri, opts = {}) {\n    super();\n    this.binaryType = defaultBinaryType;\n    this.writeBuffer = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parse(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n\n    installTimerFunctions(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = opts.transports || [\"polling\", \"websocket\", \"webtransport\"];\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = decode(this.opts.query);\n    } // set on handshake\n\n\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null; // set on heartbeat\n\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        this.beforeunloadEventListener = () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        };\n\n        addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n      }\n\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n\n    this.open();\n  }\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} name - transport name\r\n   * @return {Transport}\r\n   * @private\r\n   */\n\n\n  createTransport(name) {\n    const query = Object.assign({}, this.opts.query); // append engine.io protocol identifier\n\n    query.EIO = protocol; // transport name\n\n    query.transport = name; // session id if we already have one\n\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    }, this.opts.transportOptions[name]);\n    return new transports[name](opts);\n  }\n  /**\r\n   * Initializes transport to use and starts probe.\r\n   *\r\n   * @private\r\n   */\n\n\n  open() {\n    let transport;\n\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n\n    this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\r\n   * Sets the current transport. Disables the existing one (if any).\r\n   *\r\n   * @private\r\n   */\n\n\n  setTransport(transport) {\n    if (this.transport) {\n      this.transport.removeAllListeners();\n    } // set up transport\n\n\n    this.transport = transport; // set up transport listeners\n\n    transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", reason => this.onClose(\"transport close\", reason));\n  }\n  /**\r\n   * Probes a transport.\r\n   *\r\n   * @param {String} name - transport name\r\n   * @private\r\n   */\n\n\n  probe(name) {\n    let transport = this.createTransport(name);\n    let failed = false;\n    Socket.priorWebsocketSuccess = false;\n\n    const onTransportOpen = () => {\n      if (failed) return;\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          const err = new Error(\"probe error\"); // @ts-ignore\n\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n\n    function freezeTransport() {\n      if (failed) return; // Any callback called by transport should be ignored since now\n\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    } // Handle any error that happens while probing\n\n\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err); // @ts-ignore\n\n      error.transport = transport.name;\n      freezeTransport();\n      this.emitReserved(\"upgradeError\", error);\n    };\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    } // When the socket is closed while we're probing\n\n\n    function onclose() {\n      onerror(\"socket closed\");\n    } // When the socket is upgraded while we're probing\n\n\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        freezeTransport();\n      }\n    } // Remove all listeners on the transport and on self\n\n\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n\n    if (this.upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n      // favor WebTransport\n      this.setTimeoutFn(() => {\n        if (!failed) {\n          transport.open();\n        }\n      }, 200);\n    } else {\n      transport.open();\n    }\n  }\n  /**\r\n   * Called when connection is deemed open.\r\n   *\r\n   * @private\r\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush(); // we check for `readyState` in case an `open`\n    // listener already closed the socket\n\n    if (\"open\" === this.readyState && this.opts.upgrade) {\n      let i = 0;\n      const l = this.upgrades.length;\n\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n  /**\r\n   * Handles a packet.\r\n   *\r\n   * @private\r\n   */\n\n\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n      this.emitReserved(\"heartbeat\");\n      this.resetPingTimeout();\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\"); // @ts-ignore\n\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {}\n  }\n  /**\r\n   * Called upon handshake completion.\r\n   *\r\n   * @param {Object} data - handshake obj\r\n   * @private\r\n   */\n\n\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.maxPayload = data.maxPayload;\n    this.onOpen(); // In case open handler closes socket\n\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n  /**\r\n   * Sets and resets ping timeout timer based on server pings.\r\n   *\r\n   * @private\r\n   */\n\n\n  resetPingTimeout() {\n    this.clearTimeoutFn(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = this.setTimeoutFn(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n  /**\r\n   * Called on `drain` event\r\n   *\r\n   * @private\r\n   */\n\n\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\r\n   * Flush write buffers.\r\n   *\r\n   * @private\r\n   */\n\n\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this.getWritablePackets();\n      this.transport.send(packets); // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n\n      this.prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\r\n   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\r\n   * long-polling)\r\n   *\r\n   * @private\r\n   */\n\n\n  getWritablePackets() {\n    const shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n\n    let payloadSize = 1; // first packet type\n\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n\n      if (data) {\n        payloadSize += byteLength(data);\n      }\n\n      if (i > 0 && payloadSize > this.maxPayload) {\n        return this.writeBuffer.slice(0, i);\n      }\n\n      payloadSize += 2; // separator + packet type\n    }\n\n    return this.writeBuffer;\n  }\n  /**\r\n   * Sends a message.\r\n   *\r\n   * @param {String} msg - message.\r\n   * @param {Object} options.\r\n   * @param {Function} callback function.\r\n   * @return {Socket} for chaining.\r\n   */\n\n\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} type: packet type.\r\n   * @param {String} data.\r\n   * @param {Object} options.\r\n   * @param {Function} fn - callback function.\r\n   * @private\r\n   */\n\n\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\r\n   * Closes the connection.\r\n   */\n\n\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      this.transport.close();\n    };\n\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Called upon transport error\r\n   *\r\n   * @private\r\n   */\n\n\n  onError(err) {\n    Socket.priorWebsocketSuccess = false;\n    this.emitReserved(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n  /**\r\n   * Called upon transport close.\r\n   *\r\n   * @private\r\n   */\n\n\n  onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      // clear timers\n      this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport\n\n      this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n      this.transport.close(); // ignore further transport communication\n\n      this.transport.removeAllListeners();\n\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      } // set ready state\n\n\n      this.readyState = \"closed\"; // clear session id\n\n      this.id = null; // emit close event\n\n      this.emitReserved(\"close\", reason, description); // clean buffers after, so users can still\n      // grab the buffers on `close` event\n\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n  /**\r\n   * Filters upgrades, returning only those matching client transports.\r\n   *\r\n   * @param {Array} upgrades - server upgrades\r\n   * @private\r\n   */\n\n\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n\n    return filteredUpgrades;\n  }\n\n}\nSocket.protocol = protocol;","map":{"version":3,"sources":["C:/Users/Nathan/Documents/CSULB stuff/cecs327/Networking-class/JS PRACTICE/client/node_modules/engine.io-client/build/esm/socket.js"],"names":["transports","installTimerFunctions","byteLength","decode","parse","Emitter","protocol","defaultBinaryType","Socket","constructor","uri","opts","binaryType","writeBuffer","hostname","host","secure","port","query","location","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","beforeunloadEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","createTransport","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","readyState","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","onOpen","i","l","packet","resetPingTimeout","onHandshake","JSON","sendPacket","code","filterUpgrades","maxPayload","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","slice","write","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j"],"mappings":"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","sourcesContent":["import { transports } from \"./transports/index.js\";\r\nimport { installTimerFunctions, byteLength } from \"./util.js\";\r\nimport { decode } from \"./contrib/parseqs.js\";\r\nimport { parse } from \"./contrib/parseuri.js\";\r\nimport { Emitter } from \"@socket.io/component-emitter\";\r\nimport { protocol } from \"engine.io-parser\";\r\nimport { defaultBinaryType } from \"./transports/websocket-constructor.js\";\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * Socket constructor.\r\n     *\r\n     * @param {String|Object} uri - uri or options\r\n     * @param {Object} opts - options\r\n     */\r\n    constructor(uri, opts = {}) {\r\n        super();\r\n        this.binaryType = defaultBinaryType;\r\n        this.writeBuffer = [];\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = null;\r\n        }\r\n        if (uri) {\r\n            uri = parse(uri);\r\n            opts.hostname = uri.host;\r\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\r\n            opts.port = uri.port;\r\n            if (uri.query)\r\n                opts.query = uri.query;\r\n        }\r\n        else if (opts.host) {\r\n            opts.hostname = parse(opts.host).host;\r\n        }\r\n        installTimerFunctions(this, opts);\r\n        this.secure =\r\n            null != opts.secure\r\n                ? opts.secure\r\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\r\n        if (opts.hostname && !opts.port) {\r\n            // if no port is specified manually, use the protocol default\r\n            opts.port = this.secure ? \"443\" : \"80\";\r\n        }\r\n        this.hostname =\r\n            opts.hostname ||\r\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\r\n        this.port =\r\n            opts.port ||\r\n                (typeof location !== \"undefined\" && location.port\r\n                    ? location.port\r\n                    : this.secure\r\n                        ? \"443\"\r\n                        : \"80\");\r\n        this.transports = opts.transports || [\r\n            \"polling\",\r\n            \"websocket\",\r\n            \"webtransport\",\r\n        ];\r\n        this.writeBuffer = [];\r\n        this.prevBufferLen = 0;\r\n        this.opts = Object.assign({\r\n            path: \"/engine.io\",\r\n            agent: false,\r\n            withCredentials: false,\r\n            upgrade: true,\r\n            timestampParam: \"t\",\r\n            rememberUpgrade: false,\r\n            addTrailingSlash: true,\r\n            rejectUnauthorized: true,\r\n            perMessageDeflate: {\r\n                threshold: 1024,\r\n            },\r\n            transportOptions: {},\r\n            closeOnBeforeunload: false,\r\n        }, opts);\r\n        this.opts.path =\r\n            this.opts.path.replace(/\\/$/, \"\") +\r\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\r\n        if (typeof this.opts.query === \"string\") {\r\n            this.opts.query = decode(this.opts.query);\r\n        }\r\n        // set on handshake\r\n        this.id = null;\r\n        this.upgrades = null;\r\n        this.pingInterval = null;\r\n        this.pingTimeout = null;\r\n        // set on heartbeat\r\n        this.pingTimeoutTimer = null;\r\n        if (typeof addEventListener === \"function\") {\r\n            if (this.opts.closeOnBeforeunload) {\r\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\r\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\r\n                // closed/reloaded)\r\n                this.beforeunloadEventListener = () => {\r\n                    if (this.transport) {\r\n                        // silently close the transport\r\n                        this.transport.removeAllListeners();\r\n                        this.transport.close();\r\n                    }\r\n                };\r\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\r\n            }\r\n            if (this.hostname !== \"localhost\") {\r\n                this.offlineEventListener = () => {\r\n                    this.onClose(\"transport close\", {\r\n                        description: \"network connection lost\",\r\n                    });\r\n                };\r\n                addEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n        }\r\n        this.open();\r\n    }\r\n    /**\r\n     * Creates transport of the given type.\r\n     *\r\n     * @param {String} name - transport name\r\n     * @return {Transport}\r\n     * @private\r\n     */\r\n    createTransport(name) {\r\n        const query = Object.assign({}, this.opts.query);\r\n        // append engine.io protocol identifier\r\n        query.EIO = protocol;\r\n        // transport name\r\n        query.transport = name;\r\n        // session id if we already have one\r\n        if (this.id)\r\n            query.sid = this.id;\r\n        const opts = Object.assign({}, this.opts, {\r\n            query,\r\n            socket: this,\r\n            hostname: this.hostname,\r\n            secure: this.secure,\r\n            port: this.port,\r\n        }, this.opts.transportOptions[name]);\r\n        return new transports[name](opts);\r\n    }\r\n    /**\r\n     * Initializes transport to use and starts probe.\r\n     *\r\n     * @private\r\n     */\r\n    open() {\r\n        let transport;\r\n        if (this.opts.rememberUpgrade &&\r\n            Socket.priorWebsocketSuccess &&\r\n            this.transports.indexOf(\"websocket\") !== -1) {\r\n            transport = \"websocket\";\r\n        }\r\n        else if (0 === this.transports.length) {\r\n            // Emit error on next tick so it can be listened to\r\n            this.setTimeoutFn(() => {\r\n                this.emitReserved(\"error\", \"No transports available\");\r\n            }, 0);\r\n            return;\r\n        }\r\n        else {\r\n            transport = this.transports[0];\r\n        }\r\n        this.readyState = \"opening\";\r\n        // Retry with the next transport if the transport is disabled (jsonp: false)\r\n        try {\r\n            transport = this.createTransport(transport);\r\n        }\r\n        catch (e) {\r\n            this.transports.shift();\r\n            this.open();\r\n            return;\r\n        }\r\n        transport.open();\r\n        this.setTransport(transport);\r\n    }\r\n    /**\r\n     * Sets the current transport. Disables the existing one (if any).\r\n     *\r\n     * @private\r\n     */\r\n    setTransport(transport) {\r\n        if (this.transport) {\r\n            this.transport.removeAllListeners();\r\n        }\r\n        // set up transport\r\n        this.transport = transport;\r\n        // set up transport listeners\r\n        transport\r\n            .on(\"drain\", this.onDrain.bind(this))\r\n            .on(\"packet\", this.onPacket.bind(this))\r\n            .on(\"error\", this.onError.bind(this))\r\n            .on(\"close\", (reason) => this.onClose(\"transport close\", reason));\r\n    }\r\n    /**\r\n     * Probes a transport.\r\n     *\r\n     * @param {String} name - transport name\r\n     * @private\r\n     */\r\n    probe(name) {\r\n        let transport = this.createTransport(name);\r\n        let failed = false;\r\n        Socket.priorWebsocketSuccess = false;\r\n        const onTransportOpen = () => {\r\n            if (failed)\r\n                return;\r\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\r\n            transport.once(\"packet\", (msg) => {\r\n                if (failed)\r\n                    return;\r\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\r\n                    this.upgrading = true;\r\n                    this.emitReserved(\"upgrading\", transport);\r\n                    if (!transport)\r\n                        return;\r\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\r\n                    this.transport.pause(() => {\r\n                        if (failed)\r\n                            return;\r\n                        if (\"closed\" === this.readyState)\r\n                            return;\r\n                        cleanup();\r\n                        this.setTransport(transport);\r\n                        transport.send([{ type: \"upgrade\" }]);\r\n                        this.emitReserved(\"upgrade\", transport);\r\n                        transport = null;\r\n                        this.upgrading = false;\r\n                        this.flush();\r\n                    });\r\n                }\r\n                else {\r\n                    const err = new Error(\"probe error\");\r\n                    // @ts-ignore\r\n                    err.transport = transport.name;\r\n                    this.emitReserved(\"upgradeError\", err);\r\n                }\r\n            });\r\n        };\r\n        function freezeTransport() {\r\n            if (failed)\r\n                return;\r\n            // Any callback called by transport should be ignored since now\r\n            failed = true;\r\n            cleanup();\r\n            transport.close();\r\n            transport = null;\r\n        }\r\n        // Handle any error that happens while probing\r\n        const onerror = (err) => {\r\n            const error = new Error(\"probe error: \" + err);\r\n            // @ts-ignore\r\n            error.transport = transport.name;\r\n            freezeTransport();\r\n            this.emitReserved(\"upgradeError\", error);\r\n        };\r\n        function onTransportClose() {\r\n            onerror(\"transport closed\");\r\n        }\r\n        // When the socket is closed while we're probing\r\n        function onclose() {\r\n            onerror(\"socket closed\");\r\n        }\r\n        // When the socket is upgraded while we're probing\r\n        function onupgrade(to) {\r\n            if (transport && to.name !== transport.name) {\r\n                freezeTransport();\r\n            }\r\n        }\r\n        // Remove all listeners on the transport and on self\r\n        const cleanup = () => {\r\n            transport.removeListener(\"open\", onTransportOpen);\r\n            transport.removeListener(\"error\", onerror);\r\n            transport.removeListener(\"close\", onTransportClose);\r\n            this.off(\"close\", onclose);\r\n            this.off(\"upgrading\", onupgrade);\r\n        };\r\n        transport.once(\"open\", onTransportOpen);\r\n        transport.once(\"error\", onerror);\r\n        transport.once(\"close\", onTransportClose);\r\n        this.once(\"close\", onclose);\r\n        this.once(\"upgrading\", onupgrade);\r\n        if (this.upgrades.indexOf(\"webtransport\") !== -1 &&\r\n            name !== \"webtransport\") {\r\n            // favor WebTransport\r\n            this.setTimeoutFn(() => {\r\n                if (!failed) {\r\n                    transport.open();\r\n                }\r\n            }, 200);\r\n        }\r\n        else {\r\n            transport.open();\r\n        }\r\n    }\r\n    /**\r\n     * Called when connection is deemed open.\r\n     *\r\n     * @private\r\n     */\r\n    onOpen() {\r\n        this.readyState = \"open\";\r\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\r\n        this.emitReserved(\"open\");\r\n        this.flush();\r\n        // we check for `readyState` in case an `open`\r\n        // listener already closed the socket\r\n        if (\"open\" === this.readyState && this.opts.upgrade) {\r\n            let i = 0;\r\n            const l = this.upgrades.length;\r\n            for (; i < l; i++) {\r\n                this.probe(this.upgrades[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handles a packet.\r\n     *\r\n     * @private\r\n     */\r\n    onPacket(packet) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            this.emitReserved(\"packet\", packet);\r\n            // Socket is live - any packet counts\r\n            this.emitReserved(\"heartbeat\");\r\n            this.resetPingTimeout();\r\n            switch (packet.type) {\r\n                case \"open\":\r\n                    this.onHandshake(JSON.parse(packet.data));\r\n                    break;\r\n                case \"ping\":\r\n                    this.sendPacket(\"pong\");\r\n                    this.emitReserved(\"ping\");\r\n                    this.emitReserved(\"pong\");\r\n                    break;\r\n                case \"error\":\r\n                    const err = new Error(\"server error\");\r\n                    // @ts-ignore\r\n                    err.code = packet.data;\r\n                    this.onError(err);\r\n                    break;\r\n                case \"message\":\r\n                    this.emitReserved(\"data\", packet.data);\r\n                    this.emitReserved(\"message\", packet.data);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon handshake completion.\r\n     *\r\n     * @param {Object} data - handshake obj\r\n     * @private\r\n     */\r\n    onHandshake(data) {\r\n        this.emitReserved(\"handshake\", data);\r\n        this.id = data.sid;\r\n        this.transport.query.sid = data.sid;\r\n        this.upgrades = this.filterUpgrades(data.upgrades);\r\n        this.pingInterval = data.pingInterval;\r\n        this.pingTimeout = data.pingTimeout;\r\n        this.maxPayload = data.maxPayload;\r\n        this.onOpen();\r\n        // In case open handler closes socket\r\n        if (\"closed\" === this.readyState)\r\n            return;\r\n        this.resetPingTimeout();\r\n    }\r\n    /**\r\n     * Sets and resets ping timeout timer based on server pings.\r\n     *\r\n     * @private\r\n     */\r\n    resetPingTimeout() {\r\n        this.clearTimeoutFn(this.pingTimeoutTimer);\r\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\r\n            this.onClose(\"ping timeout\");\r\n        }, this.pingInterval + this.pingTimeout);\r\n        if (this.opts.autoUnref) {\r\n            this.pingTimeoutTimer.unref();\r\n        }\r\n    }\r\n    /**\r\n     * Called on `drain` event\r\n     *\r\n     * @private\r\n     */\r\n    onDrain() {\r\n        this.writeBuffer.splice(0, this.prevBufferLen);\r\n        // setting prevBufferLen = 0 is very important\r\n        // for example, when upgrading, upgrade packet is sent over,\r\n        // and a nonzero prevBufferLen could cause problems on `drain`\r\n        this.prevBufferLen = 0;\r\n        if (0 === this.writeBuffer.length) {\r\n            this.emitReserved(\"drain\");\r\n        }\r\n        else {\r\n            this.flush();\r\n        }\r\n    }\r\n    /**\r\n     * Flush write buffers.\r\n     *\r\n     * @private\r\n     */\r\n    flush() {\r\n        if (\"closed\" !== this.readyState &&\r\n            this.transport.writable &&\r\n            !this.upgrading &&\r\n            this.writeBuffer.length) {\r\n            const packets = this.getWritablePackets();\r\n            this.transport.send(packets);\r\n            // keep track of current length of writeBuffer\r\n            // splice writeBuffer and callbackBuffer on `drain`\r\n            this.prevBufferLen = packets.length;\r\n            this.emitReserved(\"flush\");\r\n        }\r\n    }\r\n    /**\r\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\r\n     * long-polling)\r\n     *\r\n     * @private\r\n     */\r\n    getWritablePackets() {\r\n        const shouldCheckPayloadSize = this.maxPayload &&\r\n            this.transport.name === \"polling\" &&\r\n            this.writeBuffer.length > 1;\r\n        if (!shouldCheckPayloadSize) {\r\n            return this.writeBuffer;\r\n        }\r\n        let payloadSize = 1; // first packet type\r\n        for (let i = 0; i < this.writeBuffer.length; i++) {\r\n            const data = this.writeBuffer[i].data;\r\n            if (data) {\r\n                payloadSize += byteLength(data);\r\n            }\r\n            if (i > 0 && payloadSize > this.maxPayload) {\r\n                return this.writeBuffer.slice(0, i);\r\n            }\r\n            payloadSize += 2; // separator + packet type\r\n        }\r\n        return this.writeBuffer;\r\n    }\r\n    /**\r\n     * Sends a message.\r\n     *\r\n     * @param {String} msg - message.\r\n     * @param {Object} options.\r\n     * @param {Function} callback function.\r\n     * @return {Socket} for chaining.\r\n     */\r\n    write(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    send(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param {String} type: packet type.\r\n     * @param {String} data.\r\n     * @param {Object} options.\r\n     * @param {Function} fn - callback function.\r\n     * @private\r\n     */\r\n    sendPacket(type, data, options, fn) {\r\n        if (\"function\" === typeof data) {\r\n            fn = data;\r\n            data = undefined;\r\n        }\r\n        if (\"function\" === typeof options) {\r\n            fn = options;\r\n            options = null;\r\n        }\r\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\r\n            return;\r\n        }\r\n        options = options || {};\r\n        options.compress = false !== options.compress;\r\n        const packet = {\r\n            type: type,\r\n            data: data,\r\n            options: options,\r\n        };\r\n        this.emitReserved(\"packetCreate\", packet);\r\n        this.writeBuffer.push(packet);\r\n        if (fn)\r\n            this.once(\"flush\", fn);\r\n        this.flush();\r\n    }\r\n    /**\r\n     * Closes the connection.\r\n     */\r\n    close() {\r\n        const close = () => {\r\n            this.onClose(\"forced close\");\r\n            this.transport.close();\r\n        };\r\n        const cleanupAndClose = () => {\r\n            this.off(\"upgrade\", cleanupAndClose);\r\n            this.off(\"upgradeError\", cleanupAndClose);\r\n            close();\r\n        };\r\n        const waitForUpgrade = () => {\r\n            // wait for upgrade to finish since we can't send packets while pausing a transport\r\n            this.once(\"upgrade\", cleanupAndClose);\r\n            this.once(\"upgradeError\", cleanupAndClose);\r\n        };\r\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n            this.readyState = \"closing\";\r\n            if (this.writeBuffer.length) {\r\n                this.once(\"drain\", () => {\r\n                    if (this.upgrading) {\r\n                        waitForUpgrade();\r\n                    }\r\n                    else {\r\n                        close();\r\n                    }\r\n                });\r\n            }\r\n            else if (this.upgrading) {\r\n                waitForUpgrade();\r\n            }\r\n            else {\r\n                close();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Called upon transport error\r\n     *\r\n     * @private\r\n     */\r\n    onError(err) {\r\n        Socket.priorWebsocketSuccess = false;\r\n        this.emitReserved(\"error\", err);\r\n        this.onClose(\"transport error\", err);\r\n    }\r\n    /**\r\n     * Called upon transport close.\r\n     *\r\n     * @private\r\n     */\r\n    onClose(reason, description) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            // clear timers\r\n            this.clearTimeoutFn(this.pingTimeoutTimer);\r\n            // stop event from firing again for transport\r\n            this.transport.removeAllListeners(\"close\");\r\n            // ensure transport won't stay open\r\n            this.transport.close();\r\n            // ignore further transport communication\r\n            this.transport.removeAllListeners();\r\n            if (typeof removeEventListener === \"function\") {\r\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\r\n                removeEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n            // set ready state\r\n            this.readyState = \"closed\";\r\n            // clear session id\r\n            this.id = null;\r\n            // emit close event\r\n            this.emitReserved(\"close\", reason, description);\r\n            // clean buffers after, so users can still\r\n            // grab the buffers on `close` event\r\n            this.writeBuffer = [];\r\n            this.prevBufferLen = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Filters upgrades, returning only those matching client transports.\r\n     *\r\n     * @param {Array} upgrades - server upgrades\r\n     * @private\r\n     */\r\n    filterUpgrades(upgrades) {\r\n        const filteredUpgrades = [];\r\n        let i = 0;\r\n        const j = upgrades.length;\r\n        for (; i < j; i++) {\r\n            if (~this.transports.indexOf(upgrades[i]))\r\n                filteredUpgrades.push(upgrades[i]);\r\n        }\r\n        return filteredUpgrades;\r\n    }\r\n}\r\nSocket.protocol = protocol;\r\n"]},"metadata":{},"sourceType":"module"}