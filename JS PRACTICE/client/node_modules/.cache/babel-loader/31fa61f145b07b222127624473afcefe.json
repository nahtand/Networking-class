{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\CSULB stuff\\\\cecs327\\\\Networking-class\\\\JS PRACTICE\\\\client\\\\src\\\\CodeEditor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/python/python';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport CodeMirror from \"codemirror\";\nimport io from 'socket.io-client'; //import { Controlled as ControlledEditor} from 'react-codemirror2'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = () => {\n  _s();\n\n  useEffect(() => {\n    const editor = CodeMirror.fromTextArea(document.getElementById('codemirror'), {\n      lineNumbers: true,\n      keymap: 'sublime',\n      theme: 'material',\n      mode: 'python'\n    }); //sends out changes\n\n    editor.on('change', (instance, changes) => {\n      const {\n        origin\n      } = changes;\n\n      if (origin !== 'setValue') {\n        socket.emit('send-changes', instance.getValue());\n      }\n    }); //sets websocket\n\n    const socket = io('http://localhost:3001/', {\n      transports: ['websocket']\n    }); //recieves changes and inserts them into the doc\n\n    socket.on('receive-changes', delta => {\n      editor.setValue(delta);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"codemirror\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeEditor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["C:/Users/Nathan/Documents/CSULB stuff/cecs327/Networking-class/JS PRACTICE/client/src/CodeEditor.js"],"names":["React","useEffect","useState","CodeMirror","io","CodeEditor","editor","fromTextArea","document","getElementById","lineNumbers","keymap","theme","mode","on","instance","changes","origin","socket","emit","getValue","transports","delta","setValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,+BAAP;AACA,OAAO,+BAAP;AACA,OAAO,+BAAP;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAEvBJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,MAAM,GAAGH,UAAU,CAACI,YAAX,CACbC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CADa,EAEb;AACEC,MAAAA,WAAW,EAAE,IADf;AAEEC,MAAAA,MAAM,EAAE,SAFV;AAGEC,MAAAA,KAAK,EAAE,UAHT;AAIEC,MAAAA,IAAI,EAAE;AAJR,KAFa,CAAf,CADc,CAWd;;AACAP,IAAAA,MAAM,CAACQ,EAAP,CAAU,QAAV,EAAoB,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACzC,YAAM;AAACC,QAAAA;AAAD,UAAWD,OAAjB;;AACA,UAAIC,MAAM,KAAK,UAAf,EAA2B;AACzBC,QAAAA,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA4BJ,QAAQ,CAACK,QAAT,EAA5B;AACD;AACF,KALD,EAZc,CAmBd;;AACA,UAAMF,MAAM,GAAGd,EAAE,CAAC,wBAAD,EAA2B;AAC1CiB,MAAAA,UAAU,EAAE,CAAC,WAAD;AAD8B,KAA3B,CAAjB,CApBc,CAwBd;;AACAH,IAAAA,MAAM,CAACJ,EAAP,CAAU,iBAAV,EAA6BQ,KAAK,IAAI;AACpChB,MAAAA,MAAM,CAACiB,QAAP,CAAgBD,KAAhB;AACD,KAFD;AAID,GA7BQ,EA6BN,EA7BM,CAAT;AAgCA,sBACE;AAAA,2BACE;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvCD;;GAAMjB,U;;KAAAA,U;AAyCN,eAAeA,UAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/python/python'\r\nimport 'codemirror/addon/edit/closetag'\r\nimport 'codemirror/addon/edit/closebrackets'\r\nimport CodeMirror from \"codemirror\"\r\nimport io from 'socket.io-client'\r\n//import { Controlled as ControlledEditor} from 'react-codemirror2'\r\n\r\nconst CodeEditor = () => {\r\n  \r\n  useEffect(() => {\r\n    const editor = CodeMirror.fromTextArea(\r\n      document.getElementById('codemirror'), \r\n      {\r\n        lineNumbers: true,\r\n        keymap: 'sublime',\r\n        theme: 'material',\r\n        mode: 'python',\r\n      }\r\n    )\r\n    \r\n    //sends out changes\r\n    editor.on('change', (instance, changes) => {\r\n      const {origin} = changes\r\n      if (origin !== 'setValue') {\r\n        socket.emit('send-changes', instance.getValue())\r\n      }\r\n    })\r\n\r\n    //sets websocket\r\n    const socket = io('http://localhost:3001/', {\r\n      transports: ['websocket']\r\n    })\r\n\r\n    //recieves changes and inserts them into the doc\r\n    socket.on('receive-changes', delta => {\r\n      editor.setValue(delta)\r\n    })\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div>\r\n      <textarea id=\"codemirror\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeEditor"]},"metadata":{},"sourceType":"module"}